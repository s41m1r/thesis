@inproceedings{Agrawal2016,
abstract = {{\textcopyright} 2016 IEEE.Collaboration in business processes and projects requires a division of responsibilities among the participants. Version control systems allow us to collect profiles of the participants that hint at participants' roles in the collaborative work. The goal of this paper is to automatically classify participants into the roles they fulfill in the collaboration. Two approaches are proposed and compared in this paper. The first approach finds classes of users by applying k-means clustering to users based on attributes calculated for them. The classes identified by the clustering are then used to build a decision tree classification model. The second approach classifies individual commits based on commit messages and file types. The distribution of commit types is used for creating a decision tree classification model. The two approaches are implemented and tested against three real datasets, one from academia and two from industry. Our classification covers 86$\backslash${\%} percent of the total commits. The results are evaluated with actual role information that was manually collected from the teams responsible for the analyzed repositories.},
author = {Agrawal, K. and Aschauer, M. and Thonhofer, T. and Bala, S. and Rogge-Solti, A. and Tomsich, N.},
booktitle = {Proc. - IEEE Int. Enterp. Distrib. Object Comput. Work. EDOCW},
doi = {10.1109/EDOCW.2016.7584383},
file = {:home/saimir/ownCloud/Mendeley Bibliography/Enterprise Distributed Object Computing Conference (EDOC), 2016 IEEE 20th International/Agrawal et al. - 2016 - Enterprise Distributed Object Computing Conference (EDOC), 2016 IEEE 20th International(2).pdf:pdf},
isbn = {9781467399333},
issn = {15417719},
keywords = {[Role discovery, Software Projects, Version Contro},
title = {{Resource Classification from Version Control System Logs}},
volume = {2016-Septe},
year = {2016}
}

@article{Goncalves2011,
abstract = {Process Modeling has been a very active research topic for the last decades. One of its main issues is the externalization of knowledge and its acquisition for further use, as this remains deeply related to the quality of the resulting process models produced by this task. This paper presents a method and a graphical supporting tool for process elicitation and modeling, combining the Group Storytelling technique with the advances of Text Mining and Natural Language Processing. The implemented tool extends its previous versions with several functionalities to facilitate group story telling by the users, as well as to improve the results of the acquired process model from the stories},
author = {Gon{\c{c}}alves, Jo{\~{a}}o Carlos De A. R. and Santoro, Fl{\'{a}}via Maria and Bai{\~{a}}o, Fernanda Araujo},
file = {:home/saimir/ownCloud/Mendeley Bibliography/Journal of Universal Computer Science/Gon{\c{c}}alves, Santoro, Bai{\~{a}}o - 2011 - Journal of Universal Computer Science.pdf:pdf},
isbn = {0948-695X},
issn = {0948695X},
journal = {J. Univers. Comput. Sci.},
keywords = {2,4,7,business process modeling,categories,computer-supported collaborative work,h,i,knowledge management,text mining},
number = {2},
pages = {276----295},
title = {{Let Me Tell You a Story - On How to Build Process Models}},
volume = {17},
year = {2011}
}

@inproceedings{Bala2015,
	author    = {Saimir Bala and
	Cristina Cabanillas and
	Jan Mendling and
	Andreas Rogge{-}Solti and
	Axel Polleres},
	title     = {Mining Project-Oriented Business Processes},
	booktitle = {Business Process Management - 13th International Conference, {BPM}
	2015, Innsbruck, Austria, August 31 - September 3, 2015, Proceedings},
	pages     = {425--440},
	year      = {2015},

	doi       = {10.1007/978-3-319-23063-4_28},
	timestamp = {Thu, 13 Aug 2015 18:56:36 +0200},
	biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/bpm/BalaCMRP15},
	bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{Mittal2014,
 author = {Mittal, Megha and Sureka, Ashish},
 title = {Process Mining Software Repositories from Student Projects in an Undergraduate Software Engineering Course},
 booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
 series = {ICSE Companion 2014},
 year = {2014},
 isbn = {978-1-4503-2768-8},
 location = {Hyderabad, India},
 pages = {344--353},
 numpages = {10},

 doi = {10.1145/2591062.2591152},
 acmid = {2591152},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Education Data Mining, Learning Analytic, Mining Software Repositories, Process Mining, Software Engineering Education},
} 
@article{ruohonen2015time,
  author    = {Jukka Ruohonen and
               Sami Hyrynsalmi and
               Ville Lepp{\"{a}}nen},
  title     = {Time series trends in software evolution},
  journal   = {Journal of Software: Evolution and Process},
  volume    = {27},
  number    = {12},
  pages     = {990--1015},
  year      = {2015},

  doi       = {10.1002/smr.1755},
  timestamp = {Mon, 04 Jan 2016 10:53:56 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/journals/smr/RuohonenHL15},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{Robles:2014:EDE:2597073.2597107,
 author = {Robles, Gregorio and Gonz\'{a}lez-Barahona, Jes\'{u}s M. and Cervig\'{o}n, Carlos and Capiluppi, Andrea and Izquierdo-Cort\'{a}zar, Daniel},
 title = {Estimating Development Effort in Free/Open Source Software Projects by Mining Software Repositories: A Case Study of OpenStack},
 booktitle = {Proceedings of the 11th Working Conference on Mining Software Repositories},
 series = {MSR 2014},
 year = {2014},
 isbn = {978-1-4503-2863-0},
 location = {Hyderabad, India},
 pages = {222--231},
 numpages = {10},

 doi = {10.1145/2597073.2597107},
 acmid = {2597107},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Effort estimation, free software, mining software repositories, open source},
} 

@inproceedings{DBLP:conf/vissoft/Elsen13,
  author    = {Stefan Elsen},
  title     = {VisGi: Visualizing Git branches},
  booktitle = {2013 First {IEEE} Working Conference on Software Visualization (VISSOFT),
               Eindhoven, The Netherlands, September 27-28, 2013},
  pages     = {1--4},
  year      = {2013},

  doi       = {10.1109/VISSOFT.2013.6650522},
  timestamp = {Wed, 22 Apr 2015 16:41:56 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/vissoft/Elsen13},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/quatic/CaldeiraA16,
  author    = {Jo{\~{a}}o Caldeira and
               Fernando Brito e Abreu},
  title     = {Software Development Process Mining: Discovery, Conformance Checking
               and Enhancement},
  booktitle = {10th International Conference on the Quality of Information and Communications
               Technology, {QUATIC} 2016, Lisbon, Portugal, September 6-9, 2016},
  pages     = {254--259},
  year      = {2016},

  doi       = {10.1109/QUATIC.2016.061},
  timestamp = {Thu, 19 Jan 2017 15:18:00 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/quatic/CaldeiraA16},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/vissoft/Greene015,
  author    = {Gillian J. Greene and
               Bernd Fischer},
  title     = {Interactive tag cloud visualization of software version control repositories},
  booktitle = {3rd {IEEE} Working Conference on Software Visualization, {VISSOFT}
               2015, Bremen, Germany, September 27-28, 2015},
  pages     = {56--65},
  year      = {2015},

  doi       = {10.1109/VISSOFT.2015.7332415},
  timestamp = {Tue, 10 May 2016 16:17:59 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/vissoft/Greene015},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{Bani2016,
author = {Hani Bani-Salameh and Ayat Ahmad and Ashraf Aljammal},
title = {Software evolution visualization techniques and methods - a systematic review},
journal = {2016 7th International Conference on Computer Science and Information Technology (CSIT)},
volume = {00},
number = {},
issn = {},
year = {2016},
pages = {1-6},
doi = {doi.ieeecomputersociety.org/10.1109/CSIT.2016.7549475},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
}

@inproceedings{DBLP:conf/ejc/LehtonenAKM16,
  author    = {Timo Lehtonen and
               Timo Aho and
               Kati Kuusinen and
               Tommi Mikkonen},
  title     = {Visualizations for Software Development Process Management},
  booktitle = {Information Modelling and Knowledge Bases XXVIII, 26th International
               Conference on Information Modelling and Knowledge Bases {(EJC} 2016),
               Tampere, Finland, June 6-10, 2016},
  pages     = {1--12},
  year      = {2016},

  doi       = {10.3233/978-1-61499-720-7-1},
  timestamp = {Wed, 07 Dec 2016 13:42:23 +0100},
  biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/ejc/LehtonenAKM16},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/msr/RayNBNZ15,
  author    = {Baishakhi Ray and
               Meiyappan Nagappan and
               Christian Bird and
               Nachiappan Nagappan and
               Thomas Zimmermann},
  title     = {The Uniqueness of Changes: Characteristics and Applications},
  booktitle = {12th {IEEE/ACM} Working Conference on Mining Software Repositories,
               {MSR} 2015, Florence, Italy, May 16-17, 2015},
  pages     = {34--44},
  year      = {2015},

  doi       = {10.1109/MSR.2015.11},
  timestamp = {Wed, 03 Feb 2016 18:18:52 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/msr/RayNBNZ15},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{bani2016software,
  title={Software Evolution Visualization Tools Functional Requirements: a Comprehensive Understanding},
  author={Bani-Salameh, Hani and Ahmad, Ayat},
  journal={ICSEA 2016},
  pages={209},
  year={2016}
}


@proceedings{DBLP:conf/msr/2015,
	editor    = {Massimiliano Di Penta and
	Martin Pinzger and
	Romain Robbes},
	title     = {12th {IEEE/ACM} Working Conference on Mining Software Repositories,
	{MSR} 2015, Florence, Italy, May 16-17, 2015},
	publisher = {{IEEE}},
	year      = {2015},

	isbn      = {978-0-7695-5594-2},
	timestamp = {Fri, 15 Jan 2016 09:05:52 +0100},
	biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/msr/2015},
	bibsource = {dblp computer science bibliography, http://dblp.org}
}

@proceedings{DBLP:conf/apsec/2013,
	editor    = {Pornsiri Muenchaisri and
	Gregg Rothermel},
	title     = {20th Asia-Pacific Software Engineering Conference, {APSEC} 2013, Ratchathewi,
	Bangkok, Thailand, December 2-5, 2013 - Volume 2},
	publisher = {{IEEE} Computer Society},
	year      = {2013},

	isbn      = {978-1-4799-2143-0},
	timestamp = {Mon, 01 Dec 2014 19:24:58 +0100},
	biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/apsec/2013},
	bibsource = {dblp computer science bibliography, http://dblp.org}
}

@proceedings{DBLP:conf/ejc/2016,
	editor    = {Hannu Jaakkola and
	Bernhard Thalheim and
	Yasushi Kiyoki and
	Naofumi Yoshida},
	title     = {Information Modelling and Knowledge Bases XXVIII, 26th International
	Conference on Information Modelling and Knowledge Bases {(EJC} 2016),
	Tampere, Finland, June 6-10, 2016},
	series    = {Frontiers in Artificial Intelligence and Applications},
	volume    = {292},
	publisher = {{IOS} Press},
	year      = {2017},
	isbn      = {978-1-61499-719-1},
	timestamp = {Wed, 07 Dec 2016 13:40:30 +0100},
	biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/ejc/2016},
	bibsource = {dblp computer science bibliography, http://dblp.org}
}

@proceedings{DBLP:conf/bpm/2015,
	editor    = {Hamid Reza Motahari{-}Nezhad and
	Jan Recker and
	Matthias Weidlich},
	title     = {Business Process Management - 13th International Conference, {BPM}
	2015, Innsbruck, Austria, August 31 - September 3, 2015, Proceedings},
	series    = {Lecture Notes in Computer Science},
	volume    = {9253},
	publisher = {Springer},
	year      = {2015},

	doi       = {10.1007/978-3-319-23063-4},
	isbn      = {978-3-319-23062-7},
	timestamp = {Thu, 13 Aug 2015 18:52:48 +0200},
	biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/bpm/2015},
	bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{Voinea2006b,
	   author    = {Lucian Voinea and
	   Alexandru Telea},
	   editor    = {Beatriz Sousa Santos and
	   Thomas Ertl and
	   Kenneth I. Joy},
	   title     = {CVSgrab: Mining the History of Large Software Projects},
	   booktitle = {EuroVis06: Joint Eurographics - {IEEE} {VGTC} Symposium on Visualization,
	   Lisbon, Portugal, 8-10 May 2006},
	   pages     = {187--194},
	   publisher = {Eurographics Association},
	   year      = {2006},
	   url       = {http://dx.doi.org/10.2312/VisSym/EuroVis06/187-194},
	   timestamp = {Mon, 30 Nov 2015 16:41:23 +0100},
	   biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/vissym/VoineaT06},
	   bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{zaidman2008mining,
	annote = {co-evolution
	Metrics: 
	lines of code
	release points
	
	no labels},
	author = {Zaidman, Andy and {Van Rompaey}, Bart and Demeyer, Serge and {Van Deursen}, Arie},
	booktitle = {Softw. Testing, Verif. Validation, 2008 1st Int. Conf.},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/new/icst2008.pdf:pdf},
	mendeley-groups = {Mining Software Processes},
	organization = {IEEE},
	pages = {220--229},
	title = {{Mining software repositories to study co-evolution of production {\&} test code}},
	year = {2008}
}


@article{Poncin2011,
	abstract = {Software developers{\&}{\#}x02019; activities are in general recorded in software repositories such as version control systems, bug trackers and mail archives. While abundant information is usually present in such repositories, successful information extraction is often challenged by the necessity to simultaneously analyze different repositories and to combine the information obtained. We propose to apply process mining techniques, originally developed for business process analysis, to address this challenge. However, in order for process mining to become applicable, different software repositories should be combined, and {\&}{\#}x0201C;related{\&}{\#}x0201D; software development events should be matched: e.g., mails sent about a file, modifications of the file and bug reports that can be traced back to it. The combination and matching of events has been implemented in FRASR (Framework for Analyzing Software Repositories), augmenting the process mining framework ProM. FRASR has been successfully applied in a series of case studies addressing such aspects of the development process as roles of different developers and the way bug reports are handled.},
	author = {Poncin, Wouter and Serebrenik, Alexander and Brand, Mark Van Den},
	doi = {10.1109/CSMR.2011.5},
	file = {:home/saimir/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Poncin, Serebrenik, Brand - 2011 - Process Mining Software Repositories.pdf:pdf},
	isbn = {978-0-7695-4343-7},
	issn = {1534-5351},
	journal = {2011 15th Eur. Conf. Softw. Maint. Reengineering},
	keywords = {process mining,software repositories},
	mendeley-groups = {Mining Software Processes},
	pages = {5--14},
	title = {{Process Mining Software Repositories}},
	year = {2011}
}

@article{DAmbros2009,
	abstract = {Software evolution analysis provides a valuable source of information that can be used both to understand a system's design and predict its future development. While for many program comprehension purposes, it is sufficient to model a single version of a system, there are types of information that can only be recovered when the history of a system is taken into account. Logical coupling, the implicit dependency between software artifacts that have been changed together, is an example of such information. Previous research has dealt with low-level couplings between files, leading to an explosion of the data to be analyzed, or has abstracted the logical couplings to the level of modules, leading to a loss of detailed information. In this paper, we present a visualization-based approach that integrates logical coupling information at different levels of abstraction. This facilitates an in-depth analysis of the logical couplings, and at the same time, leads to a characterization of a system's modules in terms of their logical coupling. The presented approach supports the retrospective analysis of a software system and maintenance activities such as restructuring and redocumentation. We illustrate retrospective analysis on two large open-source software systems.},
	author = {D'Ambros, Marco and Lanza, Michele and Lungu, Mircea},
	doi = {10.1109/TSE.2009.17},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/new/Visualizing Co-Change Information
	with the Evolution Radar.pdf:pdf},
	isbn = {2008020088},
	issn = {00985589},
	journal = {IEEE Trans. Softw. Eng.},
	keywords = {Logical coupling,Software evolution,Software visualization},
	mendeley-groups = {Mining Software Processes},
	number = {5},
	pages = {720--735},
	title = {{Visualizing co-change information with the evolution radar}},
	volume = {35},
	year = {2009}
}

@article{Oliva2011,
	abstract = {Logical dependencies are implicit relationships established between software artifacts that have evolved together. Software engineering researchers have investigated this kind of dependency to assess fault-proneness, detect design issues, infer code decay, and predict likely changes in code. Despite the acknowledged relation between logical dependencies and software quality, the nature of the logical dependencies is unknown in the literature. Most authors hypothesize about their origins, but no empirical study has been conducted to investigate the real nature of these dependencies. In this paper, we investigated the origins of logical dependencies by means of a case study involving a Java FLOSS project. We mined the project repository, filtered out irrelevant data based on statistical analyses, and performed a manual inspection of the logical dependencies to identify their origins using information from the revision comments, code diffs, and informal interviews held with the developers of the analyzed project. Preliminary results showed that logical dependencies involved files that changed together for a series of different reasons, which ranged from changing software license to refactoring classes that belonged to the same semantic class. {\textcopyright} 2011 ACM.},
	author = {Oliva, Gustavo A. and Santana, Francisco W.S. and Gerosa, Marco A. and de Souza, Cleidson R.B.},
	doi = {10.1145/2024445.2024452},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/new/p31-oliva.pdf:pdf},
	isbn = {9781450308489},
	journal = {Proc. 12th Int. Work. 7th Annu. ERCIM Work. Princ. Softw. Evol. Softw. Evol. - IWPSE-EVOL '11},
	keywords = {case study,change coupling,empirical software engineering,logical coupling,logical dependencies,mining software repositories,software evolution},
	mendeley-groups = {Mining Software Processes},
	pages = {31},
	title = {{Towards a classification of logical dependencies origins}},
	year = {2011}
}

@article{Zimmermann2008,
	abstract = {In software development, resources for quality assurance are limited by time and by cost. In order to allocate resources effectively, managers need to rely on their experience backed by code complexity metrics. But often dependencies exist between various pieces of code over which managers may have little knowledge. These dependencies can be construed as a low level graph of the entire system. In this paper, we propose to use network analysis on these dependency graphs. This allows managers to identify central program units that are more likely to face defects. In our evaluation on Windows Server 2003, we found that the recall for models built from network measures is by 10{\%} points higher than for models built from complexity metrics. In addition, network measures could identify 60{\%} of the binaries that the Windows developers considered as critical-twice as many as identified by complexity metrics.},
	author = {Zimmermann, Thomas and Nagappan, Nachiappan},
	doi = {10.1145/1368088.1368161},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/new/zimmermann-icse-2008.pdf:pdf},
	isbn = {9781605580791},
	issn = {02705257},
	journal = {Proc. 13th Int. Conf. Softw. Eng. - ICSE '08},
	keywords = {Experimentation,Management,Measurement,Reliability},
	mendeley-groups = {Mining Software Processes},
	pages = {531},
	title = {{Predicting defects using network analysis on dependency graphs}},

	year = {2008}
}

@inproceedings{Abate2009,
	author    = {Pietro Abate and
	Roberto Di Cosmo and
	Jaap Boender and
	Stefano Zacchiroli},
	title     = {Strong dependencies between software components},
	booktitle = {Proceedings of the Third International Symposium on Empirical Software
	Engineering and Measurement, {ESEM} 2009, October 15-16, 2009, Lake
	Buena Vista, Florida, {USA}},
	pages     = {89--99},
	year      = {2009},

	doi       = {10.1145/1671248.1671258},
	timestamp = {Mon, 04 Aug 2014 17:08:35 +0200},
	biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/esem/AbateCBZ09},
	bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{Ripley2007,
	abstract = {Real-time awareness of other developers' activities is a powerful tool to assist in coordination of developer activities. Thus far, this type of awareness has focused only on individual developers, with information regarding individual artifacts provided in a contextualized visualization. Here, we build upon our prior work, but take a broader perspective: visualization and exploration of workspace activity and evolution on a project-wide basis. We believe this visualization helps project managers who now have a comprehensive view of all project activities, allowing them to intelligently steer development and adjust task assignments. Developers can also benefit from this high level view by understanding how their work relates with each other and to the project as a whole. Another interesting aspect of our work is that we can visualize the evolution of workspaces - and the emergent project evolution - either live or postmortem: since our tool stores all the workspaces' events, we can replay, stop, rewind, and visually inspect the effort at any given point in time to find trends, problems, and other patterns of interest.},
	author = {Ripley, Roger M. and Sarma, Anita and {Van Der Hoek}, Andr{\'{e}}},
	doi = {10.1109/VISSOF.2007.4290712},
	file = {:home/saimir/Downloads/ripleyVISSOFT07.pdf:pdf},
	isbn = {1424406005},
	journal = {Viss. 2007 - Proc. 4th IEEE Int. Work. Vis. Softw. Underst. Anal.},
	mendeley-groups = {Mining Software Processes},
	pages = {137--144},
	title = {{A visualization for software project awareness and evolution}},
	year = {2007}
}
@inproceedings{Weicheng2013,
	abstract = {Using the freeware in GitHub, we are often confused by a phenomenon: the new version of GitHub freeware usually was released in an indefinite frequency, and developers often committed nothing for a long time. This evolution phenomenon interferes with our own development plan and architecture design. Why do these updates happen at that time? Can we predict GitHub software version evolution by developers' activities? This paper aims to explore the developer commit patterns in GitHub, and try to mine the relationship between these patterns (if exists) and code evolution. First, we define four metrics to measure commit activity and code evolution: the changes in each commit, the time between two commits, the author of each changes, and the source code dependency. Then, we adopt visualization techniques to explore developers' commit activity and code evolution. Visual techniques are used to describe the progress of the given project and the authors' contributions. To analyze the commit logs in GitHub software repository automatically, Commits Analysis Tool (CAT) is designed and implemented. Finally, eight open source projects in GitHub are analyzed using CAT, and we find that: 1) the file changes in the previous versions may affect the file depend on it in the next version, 2) the average days around 'huge commit' is 3 times of that around normal commit. Using these two patterns and developer's commit model, we can predict when his next commit comes and which file may be changed in that commit. Such information is valuable for project planning of both GitHub projects and other projects which use GitHub freeware to develop software. {\textcopyright} 2013 IEEE.},
	author = {Weicheng, Yang and Beijun, Shen and Ben, Xu},
	booktitle = {2013 20th Asia-Pacific Softw. Eng. Conf.},
	doi = {10.1109/APSEC.2013.133},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/16{\_}MiningGitHubWhyCommitStops.pdf:pdf},
	isbn = {978-1-4799-2144-7},
	issn = {15301362},
	keywords = {GitHub,commit pattern,repository mining,version evolution,visualization technology},
	mendeley-groups = {Mining Software Processes},
	pages = {165--169},
	title = {{Mining GitHub: Why Commit Stops -- Exploring the Relationship between Developer's Commit Pattern and File Version Evolution}},
	year = {2013}
}
@article{Greene2015,
	abstract = {Version control repositories contain a wealth of implicit information that can be used to answer many questions about a project's development process. However, this information is not directly accessible in the version control archives and must be extracted and visualized. This paper describes ConceptCloud, a flexible, interactive browser for SVN and Git repositories. The main novelty of our approach is the combination of an intuitive tag cloud visualization with an underlying concept lattice that provides a formal structure for navigation. ConceptCloud supports concurrent navigation in multiple linked but individually customizable tag clouds, which allows for multi-faceted repository browsing and for the construction of unique visualizations. We describe the mathematical foundations and implementation of our approach, and use ConceptCloud to quickly gain insight into the team structure and development process of two projects.},
	author = {Greene, Gillian J. and Fischer, Bernd},
	doi = {10.1109/VISSOFT.2015.7332415},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/12{\_}InteractiveTagCloudVisualizationofSoftwareVersionControlRepositories.pdf:pdf},
	isbn = {9781467375269},
	journal = {2015 IEEE 3rd Work. Conf. Softw. Vis. Viss. 2015 - Proc.},
	keywords = {Browsers,Context,Data visualization,Lattices,Navigation,Software,Tag clouds},
	mendeley-groups = {Mining Software Processes},
	pages = {56--65},
	title = {{Interactive tag cloud visualization of software version control repositories}},
	year = {2015}
}
@article{lindberg2016coordinating,
	author = {Lindberg, Aron and Berente, Nicholas and Gaskin, James and Lyytinen, Kalle},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/Lindberg et al. - 2016 - Coordinating Interdependencies in Online Communities A Study of an Open Source Software Project.pdf:pdf},
	journal = {Inf. Syst. Res.},
	mendeley-groups = {Mining Software Processes},
	number = {4},
	pages = {751--772},
	publisher = {INFORMS},
	title = {{Coordinating interdependencies in online communities: A study of an open source software project}},
	volume = {27},
	year = {2016}
}

@article{VanderAalst2010,
	author = {van der Aalst, Wil M P and Rubin, Vladimir A and Verbeek, H M W and van Dongen, Boudewijn F and Kindler, Ekkart and G{\"{u}}nther, Christian W},
	doi = {10.1007/s10270-008-0106-z},
	journal = {Softw. Syst. Model.},
	mendeley-groups = {Mining Software Processes},
	number = {1},
	pages = {87--111},
	title = {{Process mining: a two-step approach to balance between underfitting and overfitting}},
	volume = {9},
	year = {2010}
}

@article{DoValle2017,
	abstract = {CONTEXT
	Process assessments are performed to identify the current maturity of organizations in relation to best practices. Existing process assessment methods, although widely used, have limitations such as: dependence on the competencies of appraisers; high amount of effort and resources required; subjectivity to analyze data and to judge on the implementation of practices; low confidence in sampling and its representativeness. Currently, due to the increasing use of information systems to support process execution, detailed information on the implementation of processes are recorded as event logs, transaction logs, etc. This fact enables the usage of process mining techniques as a powerful tool for process analysis. It allows using a significant amount of data with agility and reliability for process assessments. 
	
	OBJECTIVE
	The objective of this paper is to present the development and application of a feasible, usable and useful method, which reduces the limitations of current SCAMPI method and defines how to apply process mining techniques in SCAMPI-based process assessments 
	
	METHOD
	Research method comprises nine steps that were performed in a manner that raised questions in the first four steps were answered by the last four steps of the research design. 
	
	RESULTS
	The method “Process Mining Extension to SCAMPI” was designed, developed, applied in two cases and submitted for review by experts who judged it viable, usable, and useful. 
	
	CONCLUSIONS
	As per this research, process mining techniques are suitable to be applied in software process assessments since they are aligned with the purposes of data collection and analysis tasks. In addition to that, the resulting method was judged by experts as something that reduces identified limitations of one of the most used process assessment method.},
	author = {do Valle, Arthur M. and Santos, Eduardo A.P. and Loures, Eduardo de F.R.},
	doi = {10.1016/j.infsof.2017.01.004},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/new/ApplyingProcessMiningTechniquesInSoftwareProcessAppraisals.pdf:pdf},
	issn = {09505849},
	journal = {Inf. Softw. Technol.},
	keywords = {Process mining,Software process assessment,SCAMPI,Data collection and analysis,Process Mining Extension to SCAMPI},
	mendeley-groups = {Mining Software Processes},
	pages = {1--13},
	publisher = {Elsevier B.V.},
	title = {{Applying Process Mining Techniques in Software Process Appraisals}},
	volume = {0},
	year = {2017}
}

@article{Kindler2006,
	abstract = {Today's enterprises spend much effort in obtaining precise models of their software engineering processes in order to improve the process capability of their organization and to advance one step further in the CMM. The manual design of process models, however, is complicated, time-consuming, error-prone, and the results are rapidly becoming obsolete; capabilities of human beings in detecting discrepancies between the actual process and the process model are rather limited. Consequently, automatic techniques for deriving and updating these process models are becoming more and more important. In this paper, we present an approach that exploits the user interaction with a document version management system for the automatic derivation of a descriptive process model that faithfully reflects the real process.},
	author = {Kindler, Ekkart and Rubin, Vladimir and Sch{\"{a}}fer, Wilhelm},
	file = {:home/saimir/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Kindler, Rubin, Sch{\"{a}}fer - 2006 - Activity Mining for Discovering Software Process Models.pdf:pdf},
	journal = {Softw. Eng.},
	pages = {175--180},
	title = {{Activity Mining for Discovering Software Process Models}},
	volume = {79},
	year = {2006}
}

@article{Bender2000,
	abstract = {We present a very simple algorithm for the Least Common Ancestor problem. We thus dispel the frequently held notion that an optimal LCA computation is unwieldy and unimplementable. Interestingly, this algorithm is a sequentialization of a previously known PRAM algorithm of Berkman, Breslauer, Galil, Schieber, and Vishkin [1].},
	author = {Bender, Michael a. and Farach-Colton, Mart{\'{i}}n},
	doi = {10.1007/10719839_9},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/LCA.pdf:pdf},
	isbn = {3540673067},
	issn = {03029743},
	journal = {Resumos},
	keywords = {cartesian,data structures,lca,least common ancestor,range minimum query,rmq},
	mendeley-groups = {Mining Software Processes},
	pages = {88--94},
	title = {{The LCA problem revisited (Presentation)}},
	volume = {1776 LNCS},
	year = {2000}
}

@article{Gubichev2010,
	author = {Gubichev, Andrey and Bedathur, Srikanta and Seufert, Stephan and Weikum, Gerhard},
	doi = {10.1145/1871437.1871503},
	file = {:home/saimir/svn/MiningSoftwareProcesses/literature/new/p499-gubichev.pdf:pdf},
	isbn = {9781450300995},
	journal = {Proc. 19th ACM Int. Conf. Inf. Knowl. Manag. - CIKM '10},
	keywords = {graph databases,shortest paths,social networks},
	mendeley-groups = {Mining Software Processes},
	pages = {499},
	title = {{Fast and accurate estimation of shortest paths in large graphs}},
	year = {2010}
}

@inproceedings{Canfora2006,
	author    = {Gerardo Canfora and
	Luigi Cerulo},
	title     = {Supporting change request assignment in open source development},
	booktitle = {{SAC}},
	pages     = {1767--1772},
	publisher = {{ACM}},
	year      = {2006}
}



